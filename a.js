'use strict';

// deno-fmt-ignore-file
// deno-lint-ignore-file
// This code was bundled using `deno-bundler` and it's not recommended to edit it manually

const e=function(...a){let b;return f(b="object"==typeof a[0]?a[0]:[].slice.call(a));},f=a=>{const f=[];if(0===a.length)return"";if("string"!=typeof a[0])throw new TypeError("Url must be a string. Received "+a[0]);if(a[0].match(/^[^/:]+:\/*$/)&&a.length>1){const g=a.shift();a[0]=g+a[0];}a[0].match(/^file:\/\/\//)?a[0]=a[0].replace(/^([^/:]+):\/*/,"$1:///"):a[0]=a[0].replace(/^([^/:]+):\/*/,"$1://");for(let c=0;c<a.length;c++){let b=a[c];if("string"!=typeof b)throw new TypeError("Url must be a string. Received "+b);if(""!==b)c>0&&(b=b.replace(/^[\/]+/,"")),b=c<a.length-1?b.replace(/[\/]+$/,""):b.replace(/[\/]+$/,"/"),f.push(b);}let d=f.join("/"),e=(d=d.replace(/\/(\?|&|#[^!])/g,"$1")).split("?");return d=e.shift()+(e.length>0?"?":"")+e.join("&");},g=["get","post","put","delete","options","head","connect","trace","patch",],b=()=>({list:[],use:function(a,b){const c=this.list.length;return this.list.push({fulfilled:a,rejected:b}),c;},eject:function(a){this.list[a]&&(this.list[a]=null);}});function a(b,c){return"string"==typeof b?a.request(Object.assign({},a.defaults,{url:b},c)):(0,a.request(Object.assign({},a.defaults,b)));}async function c(i){if(this.interceptors.request.list.length>0){for(const n of this.interceptors.request.list)if(n){const{fulfilled:o}=n;o&&i&&(i=await o(i));}}let{url:h="/",baseURL:p,method:b,headers:a,params:l={},data:c,timeout:q,withCredentials:t,auth:j,validateStatus:x,paramsSerializer:r,transformRequest:d,transformResponse:y,redirect:s,responseType:z="json"}=i;if(p&&(h=e(p,h)),b){if(-1===g.indexOf(b.toLowerCase().trim()))throw new Error(`Method ${b} is not supported`);b=b.toLowerCase().trim();}else b="get";let m="";l&&(m=r?r(l):Object.keys(l).map(a=>encodeURIComponent(a)+"="+encodeURIComponent(l[a])).join("&")),t&&j?.username&&j?.password&&(!a&&(a={}),a.Authorization="Basic "+btoa(unescape(encodeURIComponent(`${j.username}:${j.password}`))));const f={};if("get"!==b&&(f.method=b.toUpperCase()),m&&(h=e(h,`?${m}`)),c&&"get"!==b){if(d&&Array.isArray(d)&&d.length>0)for(var k=0;k<(d||[]).length;k++)d&&d[k]&&(c=d[k](c,a));if("string"==typeof c||c instanceof FormData||c instanceof URLSearchParams)f.body=c;else try{f.body=JSON.stringify(c),!a&&(a={}),a.Accept="application/json",a["Content-Type"]="application/json";}catch(A){}}if(a){const u=new Headers;Object.keys(a).forEach(b=>{a&&a[b]&&u.set(b,a[b]);}),f.headers=u;}const v=new AbortController;f.signal=v.signal;let w=0;return(q||0)>0&&(w=setTimeout(()=>{w=0,v.abort();},q)),s&&(f.redirect=s),fetch(h,f).then(async g=>{w&&clearTimeout(w);const i=g.status,n=g.statusText;let d=null;try{const e=g.clone();d="json"===z?await e.json():"text"===z?await e.text():"arraybuffer"===z?await e.arrayBuffer():"blob"===z?await e.blob():"stream"===z?(await e.blob()).stream():await e.text();}catch(D){d=await g.clone().text();}if(y&&y&&Array.isArray(y)&&y.length>0)for(var m=0;m<(y||[]).length;m++)y&&y[m]&&(d=y[m](d));const o=g.headers,u={url:h,baseURL:p,method:b,headers:a,params:l,data:c,timeout:q,withCredentials:t,auth:j,paramsSerializer:r,redirect:s,responseType:z};let v=!0;v=x?x(i):i>=200&&i<=303;let k=null,f=null;if(v?k={status:i,statusText:n,data:d,headers:o,config:u}:f={response:{status:i,statusText:n,data:d,headers:o},config:u},this.interceptors.response.list.length>0){for(const A of this.interceptors.response.list)if(A){const{fulfilled:B,rejected:C}=A;B&&k&&(k=await B(k)),C&&f&&(f=await C(f));}}return f?Promise.reject(f):(0,Promise.resolve(k));});}a.defaults={url:"/",method:"get",timeout:0,withCredentials:!1,validateStatus:a=>a>=200&&a<300},a.create=e=>{const d=a.bind({});return d.defaults=Object.assign({},a.defaults,e),d._request=c,d.request=a=>d._request(Object.assign({},d.defaults,a)),d.get=(a,b)=>d.request(Object.assign({},{url:a},b,{method:"get"})),d.post=(a,b,c)=>d.request(Object.assign({},{url:a},c,{method:"post",data:b})),d.put=(a,b,c)=>d.request(Object.assign({},{url:a},c,{method:"put",data:b})),d.delete=(a,b,c)=>d.request(Object.assign({},{url:a},c,{method:"delete",data:b})),d.options=(a,b,c)=>d.request(Object.assign({},{url:a},c,{method:"options",data:b})),d.head=(a,b,c)=>d.request(Object.assign({},{url:a},c,{method:"head",data:b})),d.connect=(a,b,c)=>d.request(Object.assign({},{url:a},c,{method:"connect",data:b})),d.trace=(a,b,c)=>d.request(Object.assign({},{url:a},c,{method:"trace",data:b})),d.patch=(a,b,c)=>d.request(Object.assign({},{url:a},c,{method:"patch",data:b})),d.interceptors={request:b(),response:b()},d.interceptors.request.list=[],d.interceptors.response.list=[],d;},a._request=c,a.request=c,a.get=(b,c)=>a.request(Object.assign({},{url:b},c,{method:"get"})),a.post=(b,c,d)=>a.request(Object.assign({},{url:b},d,{method:"post",data:c})),a.put=(b,c,d)=>a.request(Object.assign({},{url:b},d,{method:"put",data:c})),a.delete=(b,c,d)=>a.request(Object.assign({},{url:b},d,{method:"delete",data:c})),a.options=(b,c,d)=>a.request(Object.assign({},{url:b},d,{method:"options",data:c})),a.head=(b,c,d)=>a.request(Object.assign({},{url:b},d,{method:"head",data:c})),a.connect=(b,c,d)=>a.request(Object.assign({},{url:b},d,{method:"connect",data:c})),a.trace=(b,c,d)=>a.request(Object.assign({},{url:b},d,{method:"trace",data:c})),a.patch=(b,c,d)=>a.request(Object.assign({},{url:b},d,{method:"patch",data:c})),a.interceptors={request:b(),response:b()};const{data:d}=await a("https://postman-echo.com/delay/2");console.log(d);
